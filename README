Part1: 
waitUntil(long x): 
1. If the wait-time<=0, return.
2. Add 'waitqueue' for each Alarm object. Use the waitqueue to save the thread who calls waitUntil().
3. Add 'waketime' for each KThread object. Use the waketime to save the thread's wake up time.
3. Sort the thread inside the waitqueue by waketime. The thread with smaller wake time will have a smaller index.
4. Sleep the thread who calls waitUntil() and wait for timeinterrupt to wake it up.

timeInterrupt():
1. If the waitqueue is empty, return.
2. Remove the threads whose waketime<=currenttime And move these threads to the readyqueue.

Part1 Test:
testCase1: Test the basic function, only call the waitUntil() once.
testCase2: Try to call the waitUntil() several times
testCase3 and 4: Nested calling waitUntil()

Part2:
join()
1. Add 'jointhread' for each KThread object. Use the jointhread to save the thread(currentthread) which should be finished after the thread(this) who calls the join() function.
2. Add an assert: this.jointhread==null, assert that only one thread will wait for 'this' thread.
3. Add an assert: this!=currentThread, or there will be a deadlock
4. Add an assert: currentThread.jointhread!=this, or these two threads will wait for each other.
5. if the thread is finished, return.
6. use this.jointhread to save the currentthread and sleep() the currentthread

finish()
1. check if the currentthread has a jointhread waiting for it, set it ready().

Part2 Test:
testCase1: Basic function. Join Once.
testCase2: join and wait together
testCase3: call join() several times
testCase4: Make thread finished before join to test the assertion
testCase5: Nested join
testCase6: Set a deadlock situation

Part3:
1. Add a waitqueue for condition2 object to save the thread who can not get the resource now.
sleep()
1. Add the currentthread inside the waitqueue, and sleep the currentthread.

wake()
1. Call the cancel() function. If the first thread inside the waitqueue is waiting which means it called sleepFor() before, wake it up and remove it from the alarm.waitqueue.
2. If the first thread didn't call sleepFor() before, wake the first thread up.

wakeAll()
1. wake up all the threads inside the waitqueue

Part3 Test:
1. Use the given testcase to check the basic function
2. Call the waitUntil(), join() with the methods inside the condition2 several times.

Part4:
sleepFor(long timeout)
1. Add the currentthread inside the waitqueue
2. call waitUntil(timeout)
3. After waitUntil(), if the currentthread is still in the waitqueue, push it out(Timeout).

cancel(KThread thread)
1. Remove the thread 'thread' from the alarm.waitqueue which means that thread is no need to wait until its waketime, the resource it wants is available now.
2. put the thread inside the readyqueue.
3. if we can remove th 'thread' from the waitqueue, return true.

Part4 Test:
It's inside the part3's testcases.

Part1 Test:
1. testCase4: test the alarm for situation of setting timer for large negative values.

Finish part 5 and related test cases.

Part5:
Using a lock and two harhmaps to implement the Rendezvous function. For the harhmaps, the keys of both tag_val and tag_con are the tags. The values in the tag_val are the values used to be exchanged and the values in the tag_con are the condition variables. When there are no such values waiting for exchange, we set the thread to wait until a thread (within a same process) calls to exchange value with the same tag. 

Part5 Test:
1. Exchange returns the exchanged values from the threads properly.
We use two threads with the same tag of a same process to perform exchange.
2. Many threads can call exchange on the same tag, and exchange will correctly pair them up and exchange their values.
Similar to Test1, we use four threads with the same tag of a same process to perform exchange. Thread 1 perform exchange with Thread 2 and Thread 3 perform exchange with Thread 4.
3. Threads exchanging values on different tags operate independently of each other.
We use four threads for testing. First, set the tags of two threads (Thread 1 and 3) to be 0 and set the tags of the other two threads (Thread 2 and 4) to be 1. Then, we execute Rendezvous function.
4. Threads exchanging values on different instances of Rendezvous operate independently of each other.
We create two threads (Thread 1 and 3) using instance 1 and the other two threads (Thread 2 and 4) using instance 2. Then, let them execute the Rendezvous function.
5. A thread only returns from exchange when another thread synchronizes with it.
This time, we create two threads (Thread 1 and 2) using different tags. Then, let them execute the Rendezvous function. According to the instruction, the test case will not give any return values since both of Thread 1 and Thread 2 are in the wait state. So the program will not finish execution. To avoid this, we can simply changing the sleep function in the 49th line of Rendezvous class to sleepFor(sleepTime) function. sleepTime is a integer while can be manually set.

------------------------------------------------------ PROJECT 2 ------------------------------------------------------
Finish part 1 and related testcase
Complete writeVirtualMemory() and readVirtualMemory() with Yang Yue

Part 1:
Implement handlers for create, open, read, write, close, unlink
1. Build a fdTable[] for file descriptors. Everytime check the file descriptor whether it is between [0,15].

2. Create()/Open(): Get the filename and open the file. The difference between these two functions is the file status. True for Create(), False for Open()

3. Close(): close the file and set the fdTable[fd]=null

4. Unlink(): Get the filename, remove the file from the filesystem, check whether it is successed.

5. readVirtualMemory()/writeVirtualMemory(): set the parameter update strategy. Make sure that when the length for read/write is larger than the pagesize, it could reach the next page.

Use the basic testcases to verify the basic functions. Fix the write10 and write4 problems.

Implementations:
Part1:
handleRead(int fd, int buffer, int count)
--Parameters--
int fd -- file Descriptor
int buffer -- offset of data needed to be read
int count -- length of data needed to be read
--Function Instruction--
calls TransitionEntry.read() to copy each page's data
calls writeVirtualMemory() to implement cross-page data-copy from file to memory
--return--
int totalRead -- number of bytes that has been successfully read
(if any exception or error occurs, return -1)

handleWrite(int fd, int buffer, int count)
--Parameters--
int fd -- file Descriptor
int buffer -- offset of data needed to be written into file
int count -- length of data needed to be written into file
--Function Instruction--
calls readVirtualMemory() to implement cross-page data-copy from file to memory
calls TransitionEntry.write() to copy each page's data
--return--
int totalWrite -- number of bytes that has been successfully written to file.
(if any exception or error occurs, return -1)

Part2:
loadSections()
--Parameters--

--Function Instruction--
create a new page table for each created process, attach each .coff file descriptor
use a semaphore to implement synchronization function
use a linked list to track every free page inside user kernel
--return--
boolean --indicates that whether the page table has been built successfully

unloadSections()
--Parameters--

--Function Instruction--
unload the page table attached with a process
use a semaphore to implement synchronization function
free the linked list of that page table tracking
--return--


readVirtualMemory(int vaddr, byte[] data, int offset, int length)
--Parameters--
int vaddr -- the first byte of virtual memory to read
byte[]data -- the array where the data will be stored
int offset -- the first byte to write in the array
int length --- the number of bytes to transfer from virtual memory to the array

--Function Instruction--
calls Processor.pageFromAddress() to acquire vpn
calls Processor.offsetFromAddress() to acquire page offset from
implements read from multiple continuous pages
enables multiprocessing

--return--
int totalRead -- the number of bytes successfully transferred


writeVirtualMemory(int vaddr, byte[] data, int offset, int length)
--
is similar to readVirtualMemroy()

Finish part 3 and related test cases.

Part3:
Implement handlers for system calls including exec, join, and exit. We implement bullet proof for all three handlers.

1. We used a integer and related lock stored in the static  memory to create unique PID for each process. The handleExec() handles exec syscall and executes a given coff file in a child process with a unique pid assigned to it. 

2. The handleJoin() handles join syscall and put current process to sleep until the child process finishes. We have a map for each process to tracking its child processes and another map to record the return value for each process. Once a process is woken by its child process, it writes the return value of the child process to the specific memory if necessary.

3. The handleExit() handles exit syscall and cleans all resources used by current process. Also, it unowns its child processes. If current process has a parent process, it writes the return value to a map for recording and wake up the parent process which is going to join current process. If the exiting process is the last one, it calls to terminate.


