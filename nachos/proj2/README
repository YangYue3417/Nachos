------------------------------------------------------ PROJECT 2 ------------------------------------------------------
Haoyang Ding | A53320920 | KKDJOSEPH: 
Finish part 1 and related testcase
Complete writeVirtualMemory() and readVirtualMemory() with Yang Yue

Part 1:
Implement handlers for create, open, read, write, close, unlink
1. Build a fdTable[] for file descriptors. Everytime check the file descriptor whether it is between [0,15].

2. Create()/Open(): Get the filename and open the file. The difference between these two functions is the file status. True for Create(), False for Open()

3. Close(): close the file and set the fdTable[fd]=null

4. Unlink(): Get the filename, remove the file from the filesystem, check whether it is successed.

5. readVirtualMemory()/writeVirtualMemory(): set the parameter update strategy. Make sure that when the length for read/write is larger than the pagesize, it could reach the next page.

Use the basic testcases to verify the basic functions. Fix the write10 and write4 problems.

Shang Wang | A53320852 | ShangWangUCSD
Finish part 3 and related test cases.

Part3:
Implement handlers for system calls including exec, join, and exit. We implement bullet proof for all three handlers.

1. We used a integer and related lock stored in the static  memory to create unique PID for each process. The handleExec() handles exec syscall and executes a given coff file in a child process with a unique pid assigned to it. 

2. The handleJoin() handles join syscall and put current process to sleep until the child process finishes. We have a map for each process to tracking its child processes and another map to record the return value for each process. Once a process is woken by its child process, it writes the return value of the child process to the specific memory if necessary.

3. The handleExit() handles exit syscall and cleans all resources used by current process. Also, it unowns its child processes. If current process has a parent process, it writes the return value to a map for recording and wake up the parent process which is going to join current process. If the exiting process is the last one, it calls to terminate.
