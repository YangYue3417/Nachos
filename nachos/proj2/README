------------------------------------------------------ PROJECT 2 ------------------------------------------------------
Haoyang Ding | A53320920 | KKDJOSEPH: 
Finish part 1 and related testcase
Complete writeVirtualMemory() and readVirtualMemory() with Yang Yue

Part 1:
Implement handlers for create, open, read, write, close, unlink
1. Build a fdTable[] for file descriptors. Everytime check the file descriptor whether it is between [0,15].

2. Create()/Open(): Get the filename and open the file. The difference between these two functions is the file status. True for Create(), False for Open()

3. Close(): close the file and set the fdTable[fd]=null

4. Unlink(): Get the filename, remove the file from the filesystem, check whether it is successed.

5. readVirtualMemory()/writeVirtualMemory(): set the parameter update strategy. Make sure that when the length for read/write is larger than the pagesize, it could reach the next page.

Use the basic testcases to verify the basic functions. Fix the write10 and write4 problems.

Yang Yue | A53301503 | y5yue@ucsd.edu
Implementations:
Part1:
handleRead(int fd, int buffer, int count)
--Parameters--
int fd -- file Descriptor
int buffer -- offset of data needed to be read
int count -- length of data needed to be read
--Function Instruction--
calls TransitionEntry.read() to copy each page's data
calls writeVirtualMemory() to implement cross-page data-copy from file to memory
--return--
int totalRead -- number of bytes that has been successfully read
(if any exception or error occurs, return -1)

handleWrite(int fd, int buffer, int count)
--Parameters--
int fd -- file Descriptor
int buffer -- offset of data needed to be written into file
int count -- length of data needed to be written into file
--Function Instruction--
calls readVirtualMemory() to implement cross-page data-copy from file to memory
calls TransitionEntry.write() to copy each page's data
--return--
int totalWrite -- number of bytes that has been successfully written to file.
(if any exception or error occurs, return -1)

Part2:
loadSections()
--Parameters--
--Function Instruction--
create a new page table for each created process, attach each .coff file descriptor
use a semaphore to implement synchronization function
use a linked list to track every free page inside user kernel
--return--
boolean --indicates that whether the page table has been built successfully

unloadSections()
--Parameters--

--Function Instruction--
unload the page table attached with a process
use a semaphore to implement synchronization function
free the linked list of that page table tracking
--return--

readVirtualMemory(int vaddr, byte[] data, int offset, int length)
--Parameters--
int vaddr -- the first byte of virtual memory to read
byte[]data -- the array where the data will be stored
int offset -- the first byte to write in the array
int length --- the number of bytes to transfer from virtual memory to the array

--Function Instruction--
calls Processor.pageFromAddress() to acquire vpn
calls Processor.offsetFromAddress() to acquire page offset from
implements read from multiple continuous pages
enables multiprocessing

--return--
int totalRead -- the number of bytes successfully transferred

writeVirtualMemory(int vaddr, byte[] data, int offset, int length)
--
is similar to readVirtualMemroy()

Shang Wang | A53320852 | ShangWangUCSD
Finish part 3 and related test cases.

Part3:
Implement handlers for system calls including exec, join, and exit. We implement bullet proof for all three handlers.

1. We used a integer and related lock stored in the static  memory to create unique PID for each process. The handleExec() handles exec syscall and executes a given coff file in a child process with a unique pid assigned to it. 

2. The handleJoin() handles join syscall and put current process to sleep until the child process finishes. We have a map for each process to tracking its child processes and another map to record the return value for each process. Once a process is woken by its child process, it writes the return value of the child process to the specific memory if necessary.

3. The handleExit() handles exit syscall and cleans all resources used by current process. Also, it unowns its child processes. If current process has a parent process, it writes the return value to a map for recording and wake up the parent process which is going to join current process. If the exiting process is the last one, it calls to terminate.
